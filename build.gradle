plugins {
  id 'checkstyle'
  id 'jacoco'
  id 'pmd'
  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.springframework.boot' version '2.1.2.RELEASE'
  id 'com.jfrog.bintray' version '1.8.4'
  id 'org.owasp.dependencycheck' version '3.3.4'
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'org.sonarqube' version '2.6.2'
  id 'java-library'
  id 'maven'
  id 'maven-publish'
  id 'net.ltgt.apt' version '0.18'
}

group 'uk.gov.hmcts.reform'
version '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
}

test {
  useJUnitPlatform()
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
}

task printVersion {
  doLast {
    print project.version
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.14'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "6.9.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration
sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Health starter"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

def gitRepo = "https://github.com/hmcts/health-springboot-starter"

publishing {
  publications {
    Main(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId 'health-springboot-starter'
      version project.version

      pom.withXml {
        def root = asNode()
        root.appendNode('description', 'Global health enpoints for hmcts')
        root.appendNode('name', 'health-springboot-starter')
        root.appendNode('url', gitRepo)
        root.children().last() + pomConfig
      }
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')
  publications = ['Main']
  publish = true
  pkg {
    repo = 'hmcts-maven'
    name = 'health-springboot-starter'
    userOrg = 'hmcts'
    licenses = ['MIT']
    vcsUrl = gitRepo
    version {
      name = project.version
    }
  }
}

repositories {
  mavenLocal()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  jcenter()
  mavenCentral()
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  junit: '5.3.2',
]

dependencies {
  compile(
    "org.springframework.boot:spring-boot-starter-web",
    "org.springframework.boot:spring-boot-starter-actuator",
    "org.springframework.boot:spring-boot-starter-jdbc",
    "org.springframework.boot:spring-boot-starter-validation",
  )
  
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.3.0'

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath
  
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

test {
  useJUnitPlatform()
}

bootJar {
  enabled = false
}

jar {
  enabled = true
}
